#!/usr/bin/env bash
# vim: set ft=sh fdm=marker foldmarker={#,#}:
# =========================================================================== #
# jalcine-shell
# Author: Jacky Alciné <yo@jacky.wtf>
# Last Updated: 2016-06-24 19:30:23 PDT
# Description: Shell initialization tool.
# This script serves as a quick-n-easy init tool for me to run and invoke on new
# machines or a box that I want to seed with my preferred environment.
# =========================================================================== #

# {# Constants
# Use these values to manipulate versioning information to be used for the
# software I download and install.
# shellcheck disable=SC2034
{

# Language tools
  VERSION_RUBY="2.3.1" 
  VERSION_NODE="5.12.0"
  VERSION_PERL="5.25.2"
  VERSION_ERLANG="OTP_19.0"
  VERSION_ELIXIR="1.3.0"
  VERSION_GO="1.7"
  VERSION_PHP="7.0.8"
  VERSION_PYTHON="3.5.2"
  VERSION_RUST="stable-x86_64-unknown-linux-gnu"

# Software
  VERSION_HUB="2.2.3"
  VERSION_ANYENV="HEAD"

# Options
  JALCINE_GIT_UPDATE=0
}
# #}

# {# CLI Options
__ScriptVersion="2016-06-26"

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#===============================================================================
function usage ()
{
  echo <<USAGE_HELP
Usage :  jalcine-shell [options] [--]

  Options:
  -h|help     Display this message
  -v|version  Display script version
  -u|update   Update Git repositories
USAGE_HELP

}    # ----------  end of function usage  ----------

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

while getopts ":hvu" opt
do
  case $opt in

  h|help      )  usage; exit 0   ;;

  v|version   )  echo "$0 -- Version $__ScriptVersion"; exit 0   ;;

  u|update    ) JALCINE_GIT_UPDATE=1 ;;

  * )  echo -e "\n  Option does not exist : $OPTARG\n"
      usage; exit 1   ;;

  esac    # --- end of case ---
done
shift $(($OPTIND-1))
# #}

# {# Utilities
echo_msg()   { echo -e "[jalcine] $1"; }

# @function clone_repo
# @param uri The repository URI to clone.
# @param name (optional) The path to clone into.
# TODO: Add option to skip pulling if already there.
clone_repo() {
  local _basedir="$(basename $1)"
  local _destdir="${2:${_basedir}}";

  if [ ! -d "${_destdir}" ]; then
    echo_msg "Cloning $1 to ${_destdir}...";
    git clone --quiet --recursive --depth=1 "$1" "${_destdir}";
  else
    if [ ${JALCINE_GIT_UPDATE} ]
    then
      echo_msg "Updating $1 in ${_destdir}...";
      cd "${_destdir}" || exit;
      git pull
      cd -
    fi
  fi
}

# @function goto_temp
goto_temp()  { 
  local tmpdirpath
  _tmpdirpath=$(mktemp -d); 
  cd "$tmpdirpath";
}

# @function generate_plugin
# @param id The identifier of this plugin.
# @param body The body of the plugin's code.
# @param description The description of this plugin.
# shellcheck disable=SC2034
generate_plugin() {
  local _id=${1}
  local _body=${2}
  local _description=${3}

  local _plugin_path="$HOME/.bash/plugins.d/99_generated_for_${_id}.sh"

  if [[ ! -e "${_plugin_path}" ]]; then
    # shellcheck disable=SC2094
    cat > "${_plugin_path}" <<JALCINE_GENERATED_PLUGIN
# =========================================================================== #
# Name:    $(basename "${_plugin_path}")
# Author:  Jacky Alciné <yo@jacky.wtf>
# Updated: $(date)
#
# NOTE: This file was generated for the sake of sourcing in the following.
# ${3}
# =========================================================================== #
${2}
JALCINE_GENERATED_PLUGIN
  fi

  chmod +x "${_plugin_path}" && source "${_plugin_path}";
}

# #}

install_anyenv() {
  if [ ! -d "$HOME/.anyenv" ]
  then
    clone_repo https://github.com/jalcine/anyenv "$HOME/.anyenv"
  fi
}

install_rbenv_addons() {
  local _root
  _root=$(rbenv root);

  echo_msg "Installing rbenv addons..."
  declare -a _rbenv_addons=(\
    # 'rbenv/rbenv-default-gems' \
    "rbenv/ruby-build" \
    "tpope/rbenv-ctags" \
    "jf/rbenv-gemset" \
    "rbenv/rbenv-each" \
    "rbenv/rbenv-vars" \
    "rbenv/rbenv-default-gems" \
    "tpope/rbenv-communal-gems" \
    "aripollak/rbenv-bundler-ruby-version" \
  );

  cat > "${_root}/default-gems" <<JALCINE_RBENV_DEFAULT_GEMS
bundler
gem-ctags
awesome_print
flay
gem-browse
irbtools
pry
pry-byebug
pry-doc
rspec
JALCINE_RBENV_DEFAULT_GEMS

  for repo in ${_rbenv_addons[*]}
  do
    local _path="$_root/plugins/$(basename $repo)";
    local _repo="https://github.com/$repo" 
    clone_repo "${_repo}" "${_path}";
  done

  rbenv communize --all
  rbenv ctags

  echo_msg "Installed rbenv addons (${_rbenv_addons[*]})..."
}

generate_anyenv_plugin() {
  local _body="export PATH=\"\$HOME/.anyenv/bin:\$PATH\" && eval \"\$(anyenv init -)\""
  generate_plugin "anyenv" "${_body}"

}

install_ruby() {
  echo "$VERSION_RUBY" > "$(rbenv root)/version";
  rbenv install -sk "${VERSION_RUBY}";
  echo_msg "Installed ruby $VERSION_RUBY.";
}

install_python() {
  echo "$VERSION_PYTHON" > "$(pyenv root)/version";
  pyenv install -sk "${VERSION_PYTHON}";
  echo_msg "Installed python $VERSION_PYTHON.";
}

# {# Software

generate_git_prompt_plugin() {
  local _root=${1}
  local _body=<<JALCINE_GIT_PROMPT_PLUGIN_BODY
JALCINE_GIT_PROMPT_PLUGIN_BODY

  generate_plugin "git_prompt" "source ${_root}/gitprompt.sh"
}

install_git_prompt() {
  echo_msg "Installing git prompt...";
  mkdir -p $HOME/.bash/util;
  local _git_prompt_path="$HOME/.bash/util/git-prompt";

  if [[ ! -d ${_git_prompt_path} ]]; then
    clone_repo https://github.com/magicmonty/bash-git-prompt ${_git_prompt_path};
  fi

  generate_git_prompt_plugin ${_git_prompt_path}
  echo_msg "Installed git prompt.";
}

install_fasd() {
  if [[ ! -e $HOME/.fasd ]]; then
    echo_msg "Installing fasd...";

    # Go where no man's gone before.
    cd $(mktemp -d);

    # We're in the tempdir; so clone in the droid we were looking for.
    git clone --depth 1 git://github.com/clvv/fasd fasd;

    # Go into the folder and build that thang.
    PREFIX=$HOME/.local make -C fasd install;
    echo_msg "Installed fasd.";
  else
    echo_msg "fasd is already installed.";
  fi
}

install_evm() {
  if [ ! -d "$HOME/.evm" ]; then
    echo_msg "Installing Erlang version manager...";
    goto_temp
    clone_repo https://github.com/robisonsantos/evm evm
    cd evm
    ./install
    generate_plugin "evm" "source \$HOME/.evm/scripts/evm"
    cd ~
  else
    source "$HOME/.evm/scripts/evm"
  fi
}

# #}

# {# Rust
install_rustup() {
  curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path -yv
}

install_rust() {
  rustup --prefix="$HOME/.local"
}

# #}

# {# Perl
install_perl() {
  for perl_plug in tokuhirom/perl-build miyagawa/plenv-contrib
  do
    local repository="https://github.com/$perl_plug"
    local plugin_path="$(plenv root)/plugins/$(basename $perl_plug)"
    clone_repo $repository $plugin_path
  done

  # shellcheck disable=SC2154
  declare -a _perl_mods=(\
    "Term::ExtendedColor" \
    "Data::Dumper" \
  );

  echo_msg "Installing perl versions..."

  # shellcheck disable=SC2086
  plenv install $VERSION_PERL
  plenv global ${VERSION_PERL}
  plenv shell ${VERSION_PERL}

  echo_msg "Installing cpanminus (and ${_perl_mods[*]})..."
  plenv install-cpanm && plenv rehash
  cpanm ${_perl_mods[*]}
}

install_ls() {
  echo_msg "Building ls++..."
  goto_temp
  clone_repo https://github.com/trapd00r/ls-- ls--
  cd ls--
  perl Makefile.PL
  make
  mv blib/script/ls++ "${HOME}/.local/bin/"
  cd -
}
# #} 

# {# Go
install_goenv() {
  cd "$(anyenv root)/envs/.goenv" || exit
  git checkout ${VERSION_GOENV}
  cd -
}

install_go() {
  echo_msg "Installing go...";
  goenv install ${VERSION_GO}
  goenv global ${VERSION_GO}
  echo_msg "Installed go.";
}

install_hub() {
  if [ ! -x $(which hub) ]; then
    echo_msg "Installing hub, Github's CLI tool...";
    cd $(mktemp -d);
    clone_repo https://github.com/github/hub hub
    cd hub
    ./script/build
    cp bin/hub $HOME/.local/bin/hub
    cd -
    goenv rehash
  fi
}

# #}

install_node() {
  ndenv install -svk "${VERSION_NODE}" 
  ndenv global "${VERSION_NODE}"

  npm install npm@latest -g
  npm install yo@latest -g
}

install_php() {
  phpenv install "${VERSION_PHP}"
}

install_erlang() {
  echo_msg "Installing erlang..."
  for command in install default use
  do
    evm $command "${VERSION_ERLANG}" -y
  done
  echo_msg "Erlang installed."
}

install_elixir() {
  exenv install "${VERSION_ELIXIR}"
  exenv global "${VERSION_ELIXIR}"
}

install_pyenv_addons() {
  local _root=$(pyenv root)
  declare -a _pyenv_addons=(\
    "yyuu/pyenv-virtualenv" \
    "yyuu/pyenv-virtualenvwrapper" \
    "yyuu/pyenv-pip-rehash" \
    "yyuu/pyenv-doctor" \
  );

  declare -a py_packages=(\
      "httpie" \
      "youtube-dl" \
      "glances" \
      "neovim" \
      "docker-compose" \
      "gitsweep" \
      "pip" \
      "speedtest-cli" \
  );

  for repo in ${_pyenv_addons[*]}
  do
    local _path
    _path="$_root/plugins/$(basename $repo)";
    local _repo
    _repository="https://github.com/$repo" 
    clone_repo "${_repo}" "${_path}";
  done

  pip install --upgrade ${py_packages[*]}

  local _root=${1}
  local _body=<<JALCINE_PYENV_PLUGIN_PLUGIN_BODY
eval "$(pyenv virtualenv-init -)";
JALCINE_PYENV_PLUGIN_PLUGIN_BODY

  generate_plugin "pyenv" "${_body}"
}

install_tools() {
  install_anyenv;
  generate_anyenv_plugin;

  install_git_prompt;

  install_evm;
  install_rustup;
}

install_languages() {
  for xenv in rbenv ndenv plenv phpenv exenv goenv pyenv
  do
    anyenv install -s ${xenv};
    eval "$(anyenv init -)";
  done

  install_perl;
  install_rust;
  install_ruby;
  install_rbenv_addons;
  install_go;
  install_node;
  install_php;
  install_erlang;
  install_elixir;
  install_python;
  install_pyenv_addons;
}

install_software() {
  install_fasd;
  install_ls;
  install_hub;
}

install_tools && install_languages && install_software

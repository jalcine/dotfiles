#!/usr/bin/env zsh
# vim: set foldmarker={,}
# =========================================================================== #
# jalcine-env
#
# Author:      Jacky Alcin√© <yo@jacky.wtf>
# Date:        2017-12-24 10:12:13 PST
# Description: A tool to set up my environment.
#
# This script aims to set up my environment and lays out the tools I'd use for
# the languages I tend to program in. Those languages currently are:
#
#   - Rust
#   - Elixir
#   - Python
#   - Ruby
#   - PHP
#   - JavaScript
#   - (Experimenting) Go
#   - (Experimenting) Perl
#   - (Experimenting) Erlang
#
# This script also installs some command line tools like hub for easier
# manipulation of Github issues and tasks from the command line.

set -o allexport
set -o privileged
set -o verbose

export VERSION_ERLANG="${VERSION_ERLANG:-OTP_20.1}"
export VERSION_ELIXIR="${VERSION_ELIXIR:-1.5.2}"
export VERSION_RUBY="${VERSION_RUBY:-2.4.1}"
export VERSION_PYTHON3="${VERSION_PYTHON3:-3.6.4}"
export VERSION_NODE="${VERSION_NODE:-7.9.1}"
export VERSION_PERL="${VERSION_PERL:-5.27.7}"
export VERSION_RUST="${VERSION_RUST:-beta}"
export VERSION_PHP="${VERSION_PHP:-7.1.12}"

function echo_msg() {
  echo -e "[jacky::env] $1"
}

# @function clone_repo
# @param uri The repository URI to clone.
# @param name (optional) The path to clone into.
function clone_repo() {
  local _basedir
  local _destdir

  _basedir="$(basename ${1})"
  _destdir="${2:${_basedir}}"

  if [ ! -d "${_destdir}" ]; then
    echo_msg "Cloning $1 to ${_destdir}..."
    git clone --quiet --recursive --depth=1 "$1" "${_destdir}" || echo "Already there."
  else
    if [ ${JALCINE_GIT_UPDATE} ]; then
      echo_msg "Updating $1 in ${_destdir}..."
      cd "${_destdir}" || exit
      git pull
      cd -
    fi
  fi
}

# @function goto_temp
# Generates and navigates to a temporary directory.
function goto_temp() {
  local tmpdirpath
  _tmpdirpath=$(mktemp -d)
  cd "$tmpdirpath" || exit
}

function install_anyenv() {
  if [ -d "$HOME/.anyenv" ]; then
    echo_msg "[anyenv] Already installed."
  else
    clone_repo https://github.com/riywo/anyenv "$HOME/.anyenv"
  fi
}

function install_anyenv_plugins() {
  declare -a _anyenv_plugins=(
    "znz/anyenv-update"
    "znz/anyenv-git"
  )

  for repo in ${_anyenv_plugins[*]}; do
    local _path="$(anyenv root)/plugins/$(basename $repo)"
    local _repo="https://github.com/$repo"
    clone_repo "${_repo}" "${_path}"
  done
}

function install_languages() {
  install_system_dependencies
  install_primary_languages
  install_secondary_languages
}

function install_system_dependencies() {
  echo_msg "[system] Installing binaries (might require 'sudo' on Linux)..."
  case "$(uname -s)" in
  *Linux*)
    sudo apt install -y \
      openssl libssl-dev:amd64 \
      libreadline-dev libxml2-dev bison \
      re2c libcurl4-openssl-dev libjpeg62-dev \
      libpng-dev libmcrypt-dev libtidy-dev \
      libxslt1-dev
    ;;
  *Darwin*)
    brew bundle
    ;;
  esac
  echo_msg "[system] Installed binaries."
}

function install_primary_languages() {
  install_python
  install_perl
}

function install_secondary_languages() {
  install_ruby
  install_javascript
  install_php
  install_go
  install_erlang
  install_elixir
  install_rust
}

function install_software() {
  install_keychain
  install_fasd
  install_fzf
  install_hub
  install_ls--
}

function install_fasd() {
  if [[ ! -e $HOME/.fasd ]]; then
    echo_msg "Installing fasd..."
    goto_temp
    clone_repo git://github.com/clvv/fasd fasd
    PREFIX=$HOME/.local make -C fasd install
    echo_msg "Installed fasd."
  else
    echo_msg "fasd is already installed."
  fi
}

function install_fzf() {
  if [ ! -d $HOME/.fzf ]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --all
    echo_msg "[fzf] Installed."
  fi
}

install_ls() {
  echo_msg "[perl/ls++]: Building..."
  goto_temp
  clone_repo https://github.com/trapd00r/ls-- ls--
  cd ls--
  perl Makefile.PL
  make
  mv blib/script/ls++ "${HOME}/.local/bin/"
  cd -
}

function install_erlang() {
  if [ ! -d "${HOME}/.evm" ]; then
    echo_msg "Installing Erlang version manager..."
    goto_temp
    clone_repo https://github.com/robisonsantos/evm evm
    cd evm || exit
    ./install
    cd ~
  fi

  source "${HOME}/.evm/scripts/evm"
  echo_msg "Erlang version manager tool (v $(evm version)) installed."

  for command in install default use; do
    echo_msg "[erlang] Running ${command} for ${VERSION_ERLANG}..."
    evm $command "${VERSION_ERLANG}" -y
  done
  echo_msg "[erlang] ${VERSION_ERLANG} installed."
}

function install_elixir() {
  declare versions="$(grep $(exenv versions) ${VERSION_ELIXIR})"

  if [ ! -z "${versions}" ]; then
    echo_msg "[elixir] Installing ${VERSION_ELIXIR}..."
    exenv install -k ${VERSION_ELIXIR}
    exenv global ${VERSION_ELIXIR}
    exenv rehash
    mix local.hex --force
    mix local.rebar --force
    echo_msg "[elixir] ${VERSION_ELIXIR} installed."
  else
    echo_msg "[elixir] ${VERSION_ELIXIR} already installed."
  fi
}

function install_php() {
  echo_msg "[php] Installing ${VERSION_PHP}..."
  phpenv install ${VERSION_PHP}
  phpenv global ${VERSION_PHP}
  echo_msg "[php] ${VERSION_PHP} installed."
}

function install_go() {
  cd "$(anyenv root)/envs/goenv" || exit
  git checkout ${VERSION_GOENV}
  cd -

  echo_msg "[go] Installing..."
  goenv install ${VERSION_GO}
  goenv global ${VERSION_GO}
  go get -u github.com/mvdan/sh/cmd/gosh
  echo_msg "[go] Installed."
}

function install_perl() {
  for perl_plug in tokuhirom/perl-build miyagawa/plenv-contrib; do
    local repository="https://github.com/$perl_plug"
    local plugin_path="$(plenv root)/plugins/$(basename $perl_plug)"
    clone_repo $repository $plugin_path
  done

  echo_msg "[perl] Installing..."

  if [ ! -z "grep $(plenv versions) ${VERSION_PERL}"]; then
    plenv install ${VERSION_PERL}
    plenv global ${VERSION_PERL}
    plenv shell ${VERSION_PERL}
  fi

  echo_msg "[perl] Installing cpanminus..."
  plenv rehash
  plenv install-cpanm --local-lib=$HOME/.local/lib/perl
  echo_msg "[perl] Installing bundle..."
  plenv exec cpanm Carton
  cd ${HOME}/.jalcine
  carton
}

function install_ruby() {
  rbenv install -sk "${VERSION_RUBY}"
  rbenv global ${VERSION_RUBY}
  echo_msg "[ruby] Installed version $VERSION_RUBY."

  local _root
  _root=$(rbenv root)

  declare -a _rbenv_addons=(
    "rbenv/rbenv-default-gems"
    "rbenv/ruby-build"
    "tpope/rbenv-ctags"
    "jf/rbenv-gemset"
    "rbenv/rbenv-each"
    "rbenv/rbenv-vars"
    "rbenv/rbenv-default-gems"
    "tpope/rbenv-communal-gems"
    "aripollak/rbenv-bundler-ruby-version"
  )

  declare -a ruby_gems=(
    "bundler"
    "gem-ctags"
    "awesome_print"
    "flay"
    "gem-browse"
    "irbtools"
    "pry"
    "pry-byebug"
    "pry-doc"
    "rspec"
  )

  echo "$(ruby_gems)" | tee "${_root}/default-gems"

  for repo in ${_rbenv_addons[*]}; do
    local _path="$_root/plugins/$(basename $repo)"
    local _repo="https://github.com/$repo"
    clone_repo "${_repo}" "${_path}"
    echo_msg "[rbenv] Installed $(basename $repo)."
  done

  echo_msg "[rbenv] Communizing gems..."
  rbenv communize --all
  echo_msg "[rbenv] Generating tagfiles..."
  rbenv ctags
}

function install_javascript() {
  anyenv install ndenv
  ndenv install -svk "${VERSION_NODE}"
  ndenv global ${VERSION_NODE}

  npm install -g npm@latest yo@latest
}

function install_rust() {
  curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path -yv
  rustup
  cargo install ripgrep racer --force
}

function install_python() {
  anyenv install pyenv

  pyenv install -sk "${VERSION_PYTHON3}"
  echo_msg "[python] Installed ${VERSION_PYTHON3}."

  pyenv global ${VERSION_PYTHON3}
  pyenv rehash

  local _root=$(pyenv root)
  declare -a _pyenv_addons=(
    "yyuu/pyenv-virtualenv"
    "yyuu/pyenv-virtualenvwrapper"
    "yyuu/pyenv-pip-rehash"
    "yyuu/pyenv-doctor"
  )

  for repo in ${_pyenv_addons[*]}; do
    local _path
    _path="$_root/plugins/$(basename $repo)"
    local _repo
    _repo="https://github.com/$repo"
    clone_repo "${_repo}" "${_path}"
  done

  pyenv exec pip3 install pipenv
  cd $HOME/.jalcine
  pyenv exec pipenv install
  cd -
}

install_system_dependencies || exit
install_anyenv || exit
install_anyenv_plugins || exit
install_primary_languages || exit
install_secondary_languages || exit
install_software || exit

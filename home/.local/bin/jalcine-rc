#!/usr/bin/env bash
# vim: set ft=sh:
# Author: Jacky Alcine <me@jalcine.me>
# Description: Shell script to handle the core installation of my optimal
# system.

# Function: os_name
# Obtains the name of the operating system I'm running under.
os_name()
{
  case $(uname -s) in
    "Linux")
      return "linux"
      ;;
    "FreeBSD")
      return "bsd"
      ;;
    "Darwin")
      return "osx"
      ;;
  esac
}

linux_pacakge_manager()
{
  if [ -x apt-get ]; then
    return "sudo apt";
  elif [ -x yum ]; then
    return "sudo yum";
  fi
}

# Function: install_package
# Installs a package depending on the operating system used under the hood.
install_package()
{
  case os_name in
    "linux")
      sudo apt-get install $1
      ;;
    "bsd")
      sudo yum install $1
      ;;
    "osx")
      brew install $1
      ;;
  esac
}

# Function: install_interpreters
# Installs Ruby, Perl, Python and PHP
install_interpreters()
{
  install_ruby_interpreter
  install_perl_interpreter
  install_python_interpreter
  install_node_interpreter
}

# TODO Move out installation of gems.
# TODO Make a central list of gems to install.
install_ruby_interpreter()
{
  if ["$@" ~= "--ruby"]; then
    homeshick plugin enable rbenv
    reload
    rbenv install 2.1.1 -vk && rbenv rehash
  
    # Install some favorite gems.
    rbenv shell 2.1.1 && rbenv rehash
    gem install --verbose awesome_print rake rack sinatra json
  else
    echo -e "[jalcine] Nothing ruby-specifc being installed."
  fi
}

install_perl_interpreter()
{
  # So, I'm debating having Perl built globally because that way I can just use
  # local::lib and build on a per-project basis.
  if [[ "$@" ~= "--ruby" ]]; then
    install_package perl
    curl -L http://cpanmin.us | perl - App::cpanminus
  else
    echo -e "[jalcine] Nothing perl-specific being installed."
  fi
}

install_python_interpreter()
{
  # Use the package manager, Python's very mature of a language with its
  # package manager.
  if [[ "$@" ~= "--python" ]]; then
    install_package python
  else
    echo -e "[jalcine] Nothing python-specific being installed."
  fi
}

install_node_interpreter()
{
  if [[ "$@" ~= "--node" ]]; then
    homeshick plugin enable nvm
    reload
    nvm install v0.10.28
    nvm install v0.11.13
    nvm alias default v0.10.28 # Use 0.10.28 as the default, brah!
    nvm use 0.10.28
  
    # Install some favorite packages.
    npm install -g jshint jsonlint npm q express connect
  else
    echo -e "[jalcine] Nothing node-specific being installed."
  fi
}

install_homeshick()
{
  git clone git://github.com/andsens/homeshick $HOME/.homesick/repos/homeshick
  source "$HOME/.homesick/repos/homeshick/homeshick.sh"
}

# Install homeshick first.
install_homeshick

if [ ! -x $HOME/.homesick/repos/dotfiles ]; then
  for $dotfile in dotfiles vimrc tmuxrc
  do
    homeshick clone git://github.com/jalcine/$dotfile
    homeshick link $dotfile
    if [$dotfile eq "dotfiles" ]; then
      source $HOME/.bashrc
      # TODO: Determine which plugins should be installed on first run.
      # TODO: Determine which aliases to enable.
      # TODO: Determine which completions to enable.
      bash-it alias enable general
      bash-it alias enable homesick
      bash-it alias enable git
      [[ "$@" ~= "--ruby" ]] && bash-it alias enable ruby
      [[ "$@" ~= "--node" ]] && bash-it alias enable node
      [[ "$@" ~= "--python" ]] && bash-it alias enable python
      reload
    fi
fi

# Install my interpreters.
install_interpreters;

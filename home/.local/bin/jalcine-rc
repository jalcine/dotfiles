#!/usr/bin/env bash
# vim: set ft=sh:
# Author: Jacky Alcine <me@jalcine.me>
# Description: Shell script to handle the core installation of my optimal
# system.

# Function: os_name
# Obtains the name of the operating system I'm running under.
os_name()
{
  case $(uname -s) in
    "Linux")
      if [ -e /var/apt ]; then
        return "debian"
      fi

      return "linux"
      ;;
    "FreeBSD")
      return "bsd"
      ;;
    "Darwin")
      return "osx"
      ;;
  esac
}

linux_pacakge_manager()
{
  if [ -x apt-get ]; then
    return "sudo apt";
  elif [ -x yum ]; then
    return "sudo yum";
  fi
}

# Function: install_package
# Installs a package depending on the operating system used under the hood.
install_package()
{
  case os_name in
    "debain")
      sudo apt-get install $1
      ;;
    "bsd")
      sudo yum install $1
      ;;
    "darwin")
      [ -x brew ] && brew install $1
      [ -x port ] && sudo brew install $1
      ;;
  esac
}

# Function: install_interpreters
# Installs Ruby, Perl, Python and PHP
install_interpreters()
{
  install_ruby_interpreter
  install_perl_interpreter
  install_python_interpreter
  install_node_interpreter
}

# TODO Move out installation of gems.
# TODO Make a central list of gems to install.
install_ruby_interpreter()
{
  if [[ "$@" =~ "--ruby" ]]
  then
    homeshick plugin enable rbenv
    reload
    rbenv install 2.1.1 -vk && rbenv rehash
  
    # Install some favorite gems.
    rbenv shell 2.1.1 && rbenv rehash
    gem install --verbose awesome_print rake rack sinatra json
  else
    echo "[jalcine] Nothing ruby-specifc being installed."
  fi
}

install_perl_interpreter()
{
  # So, I'm debating having Perl built globally because that way I can just use
  # local::lib and build on a per-project basis.
  if [[ "$@" =~ "--ruby" ]]
  then
    install_package perl
    curl -L http://cpanmin.us | perl - App::cpanminus
  else
    echo "[jalcine] Nothing perl-specific being installed."
  fi
}

install_python_interpreter()
{
  # Use the package manager, Python's very mature of a language with its
  # package manager.
  if [[ "$@" =~ "--python" ]]
  then
    install_package python
  else
    echo "[jalcine] Nothing python-specific being installed."
  fi
}

install_node_interpreter()
{
  if [[ "$@" =~ "--node" ]]; then
    homeshick plugin enable nvm
    reload
    nvm install v0.10.28
    nvm install v0.11.13
    nvm alias default v0.10.28 # Use 0.10.28 as the default, brah!
    nvm use 0.10.28
  
    # Install some favorite packages.
    npm install -g jshint jsonlint npm q express connect
  else
    echo "[jalcine] Nothing node-specific being installed."
  fi
}

install_homeshick()
{
  git clone git://github.com/andsens/homeshick $HOME/.homesick/repos/homeshick
  source "$HOME/.homesick/repos/homeshick/homeshick.sh"
}

# Install homeshick first.
install_homeshick

if [ ! -x $HOME/.homesick/repos/dotfiles ]; then
  for dotfile in 'dotfiles' 'vimrc' 'tmuxrc'
  do
    homeshick clone git://github.com/jalcine/$dotfile
    homeshick link $dotfile
    if [[ $dotfile eq "dotfiles" ]]; then
      source $HOME/.bashrc

      echo "[jalcine] Enabling aliases..."
      bash-it enable alias general
      bash-it enable alias homesick
      bash-it enable alias git
      bash-it enable alias vim
      bash-it enable alias tmux
      bash-it enable alias heroku
      bash-it enable alias bundler

      echo "[jalcine] Enabling plugins..."
      bash-it enable plugin base
      bash-it enable plugin battery
      bash-it enable plugin dirs
      bash-it enable plugin git
      bash-it enable plugin fasd
      bash-it enable plugin rbenv
      bash-it enable plugin tmux
      bash-it enable plugin extract
      bash-it enable plugin homeshick

      echo "[jalcine] Enabling completions..."
      bash-it enable completion git
      bash-it enable completion git_flow
      bash-it enable completion ssh
      bash-it enable completion tmux
      bash-it enable completion bash-it
      bash-it enable completion homesick

      [[ "$@" =~ "--ruby" ]] && bash-it alias enable ruby
      [[ "$@" =~ "--node" ]] && bash-it alias enable node
      [[ "$@" =~ "--python" ]] && bash-it alias enable python
      reload
    fi
  done
fi

# Install my interpreters.
install_interpreters;

#
# weechat -- plugins.conf
#

[var]
fifo.fifo = "on"
guile.check_license = "off"
javascript.check_license = "off"
lua.check_license = "off"
perl.amarok2.color_album = "white"
perl.amarok2.color_artist = "white"
perl.amarok2.color_title = "white"
perl.amarok2.ssh_host = "localhost"
perl.amarok2.ssh_port = "22"
perl.amarok2.ssh_status = "disabled"
perl.amarok2.ssh_user = "user"
perl.amarok2.text_output = "listening to: ♬  %T from %C by %A [%Z of %M @ %S kbps] ♬"
perl.buddylist.buddy.on.server = "on"
perl.buddylist.buddy.on.server.color = "lightgreen"
perl.buddylist.buddylist = "%h/buddylist.txt"
perl.buddylist.callback.timeout = "60"
perl.buddylist.check.buddies = "20"
perl.buddylist.color.away = "cyan"
perl.buddylist.color.default = "default"
perl.buddylist.color.number = "lightred"
perl.buddylist.color.offline = "blue"
perl.buddylist.color.online = "yellow"
perl.buddylist.color.server = "white"
perl.buddylist.color.server.offline = "hide"
perl.buddylist.display.original.nick = "off"
perl.buddylist.display.social.net = "off"
perl.buddylist.display.social.net.color = "yellow"
perl.buddylist.hide.bar = "on"
perl.buddylist.hide.buddy.if.offline = "off"
perl.buddylist.hide.server.if.buddies.offline = "off"
perl.buddylist.hide.servername.in.buddylist = "off"
perl.buddylist.show.query = "on"
perl.buddylist.sort = "default"
perl.buddylist.text.away = ""
perl.buddylist.text.color = "white"
perl.buddylist.text.offline = ""
perl.buddylist.text.online = ""
perl.buddylist.use.redirection = "on"
perl.chanmon.alignment = "channel"
perl.chanmon.color_buf = "on"
perl.chanmon.dynamic = "off"
perl.chanmon.first_run = "true"
perl.chanmon.logging = "off"
perl.chanmon.merge_private = "off"
perl.chanmon.nick_prefix = "<"
perl.chanmon.nick_suffix = ">"
perl.chanmon.output = "buffer"
perl.chanmon.short_names = "off"
perl.chanmon.show_aways = "off"
perl.check_license = "off"
perl.colorize_lines.blacklist_buffers = ""
perl.colorize_lines.buffers = "all"
perl.colorize_lines.highlight = "on"
perl.colorize_lines.ignore_tags = "irc_ctcp"
perl.colorize_lines.lines = "on"
perl.colorize_lines.nicks = ""
perl.colorize_lines.own_lines = "on"
perl.colorize_lines.tags = "irc_privmsg"
perl.highmon.alignment = "channel"
perl.highmon.away_only = "off"
perl.highmon.color_buf = "on"
perl.highmon.first_run = "true"
perl.highmon.hotlist_show = "off"
perl.highmon.logging = "off"
perl.highmon.merge_private = "off"
perl.highmon.nick_prefix = "<"
perl.highmon.nick_suffix = ">"
perl.highmon.output = "buffer"
perl.highmon.short_names = "off"
perl.listsort.max_size = "65536"
perl.mass_hl_blocker.limit = "5"
perl.mplex.away_msg = "Detached head"
perl.mplex.change_away_stat = "on"
perl.mplex.emit_signals = "off"
perl.mplex.exec_script_cmds = "off"
perl.mplex.interval = "60"
perl.mplex.verbose = "on"
perl.sort_buffers.hook_signal = "off"
perl.sort_buffers.server_wide = "on"
perl.sort_buffers.sort_order = "default"
python.autosavekey.add = "off"
python.autosavekey.mute = "off"
python.autosavekey.secure = "off"
python.bufsize.count_filtered_lines = "on"
python.bufsize.format = "${color:yellow}%P${color:default}⋅%{${color:yellow}%A${color:default}⇵${color:yellow}%C${color:default}/}${color:yellow}%L"
python.chanact.color_1 = "white"
python.chanact.color_2 = "cyan"
python.chanact.color_3 = "lightcyan"
python.chanact.color_4 = "yellow"
python.chanact.color_8 = "cyan"
python.chanact.color_default = "default"
python.chanact.delimiter = ","
python.chanact.item_length = "8"
python.chanact.lowest_priority = "0"
python.chanact.message = "Act: "
python.chanact.skip_number_binds = "on"
python.chanact.sort_by_number = "off"
python.chanact.use_keybindings = "on"
python.chanstat.average_period = "30"
python.chanstat.path = "%h/chanstat"
python.chanstat.show_lows = "on"
python.chanstat.show_peaks = "on"
python.check_license = "off"
python.clone_scanner.autofocus = "off"
python.clone_scanner.clone_onjoin_alert_key = "mask"
python.clone_scanner.clone_report_key = "mask"
python.clone_scanner.colors.clone_report.clone.match = "chat"
python.clone_scanner.colors.clone_report.clone.message = "chat"
python.clone_scanner.colors.clone_report.header.channel = "bold"
python.clone_scanner.colors.clone_report.header.message = "chat"
python.clone_scanner.colors.clone_report.header.number_of_hosts = "bold"
python.clone_scanner.colors.clone_report.subheader.host = "bold"
python.clone_scanner.colors.clone_report.subheader.message = "chat"
python.clone_scanner.colors.clone_report.subheader.number_of_clones = "bold"
python.clone_scanner.colors.join_messages.channel = "bold"
python.clone_scanner.colors.join_messages.identhost = "chat"
python.clone_scanner.colors.join_messages.message = "chat"
python.clone_scanner.colors.join_messages.nick = "bold"
python.clone_scanner.colors.mask.identhost = ""
python.clone_scanner.colors.mask.nick = "bold"
python.clone_scanner.colors.onjoin_alert.channel = "red"
python.clone_scanner.colors.onjoin_alert.matches = "bold red"
python.clone_scanner.colors.onjoin_alert.message = "red"
python.clone_scanner.colors.onjoin_alert.nick = "bold red"
python.clone_scanner.compare_idents = "off"
python.clone_scanner.display_join_messages = "off"
python.clone_scanner.display_onjoin_alert_clone_buffer = "off"
python.clone_scanner.display_onjoin_alert_current_buffer = "off"
python.clone_scanner.display_onjoin_alert_target_buffer = "on"
python.clone_scanner.display_scan_report_clone_buffer = "on"
python.clone_scanner.display_scan_report_current_buffer = "on"
python.clone_scanner.display_scan_report_target_buffer = "off"
python.clone_scanner.hooks.excluded_servers = "bitlbee,twitchtv"
python.clone_scanner.hooks.explicit_servers = "*"
python.clone_scanner.lag_warning = "off"
python.correction_completion.lang = "en"
python.country.show_in_whois = "on"
python.country.show_localtime = "off"
python.country.time_format = "%x %X %Z"
python.crypt.cipher = "blowfish"
python.crypt.message_indicator = "(enc) "
python.crypt.statusbar_indicator = "(encrypted) "
python.go.auto_jump = "off"
python.go.color_name = "black,cyan"
python.go.color_name_highlight = "red,cyan"
python.go.color_name_highlight_selected = "red,brown"
python.go.color_name_selected = "black,brown"
python.go.color_number = "yellow,magenta"
python.go.color_number_selected = "yellow,red"
python.go.message = "Go to: "
python.go.short_name = "off"
python.go.sort = "number,beginning"
python.go.use_core_instead_weechat = "off"
python.grep.clear_buffer = "off"
python.grep.default_tail_head = "10"
python.grep.go_to_buffer = "on"
python.grep.log_filter = ""
python.grep.max_lines = "4000"
python.grep.show_summary = "on"
python.grep.size_limit = "2048"
python.histman.buffer_close = "off"
python.histman.history_dir = "%h/history"
python.histman.min_length = "2"
python.histman.number = "0"
python.histman.pattern = "(.*password|.*nickserv|/quit)"
python.histman.rmodifier = "off"
python.histman.save = "all"
python.histman.save_global = "off"
python.histman.skip_double = "on"
python.histsearch.color_name = "black,cyan"
python.histsearch.color_name_highlight = "red,cyan"
python.histsearch.color_name_highlight_selected = "red,brown"
python.histsearch.color_name_selected = "black,brown"
python.histsearch.color_number = "yellow,magenta"
python.histsearch.color_number_selected = "yellow,red"
python.histsearch.message = "Command: "
python.hl_nicks.ignore_case = "on"
python.hl_nicks.ignore_list = "ChanServ,.*bot.*"
python.hl_nicks.ignore_self = "on"
python.hl_nicks.separator = ", "
python.hl_nicks.short_regex = "on"
python.hl_nicks.sort_nicks = "on"
python.lastfm.command = "/me is listening to %s"
python.lastfm.lastfm_username = "jackyalcine"
python.listbuffer.autofocus = "on"
python.listbuffer.channel_min_width = "35"
python.listbuffer.modes_min_width = "8"
python.listbuffer.sort_inverted = "on"
python.listbuffer.sort_order = "users"
python.listbuffer.users_min_width = "8"
python.logsize.display = "length"
python.logsize.file_not_found = ""
python.logsize.log_disabled = ""
python.logsize.refresh = "60"
python.logsize.size = "KB"
python.notify.icon = "/usr/share/pixmaps/weechat.xpm"
python.notify.ignore_nicks_startwith = "*"
python.notify.nick_separator = ": "
python.notify.notify_when_away = "off"
python.notify.show_hilights = "on"
python.notify.show_priv_msg = "on"
python.notify.smart_notification = "on"
python.notify.urgency = "normal"
python.responsive_layout.debug = "off"
python.responsive_layout.default_nicklist = "on"
python.spell_correction.auto_pop_up_item = "off"
python.spell_correction.auto_replace = "on"
python.spell_correction.catch_input_completion = "on"
python.spell_correction.complete_near = "0"
python.spell_correction.eat_input_char = "on"
python.spell_correction.hide_single_dict = "on"
python.spell_correction.replace_mode = "off"
python.spell_correction.suggest_item = "${white}%S${default}"
python.title.short_name = "off"
python.title.title_priority = "2"
python.tmux_env.exclude = ""
python.tmux_env.include = "*,-*"
python.tmux_env.interval = "30"
python.toggle_nicklist.action = "hide"
python.toggle_nicklist.buffers = ""
python.urlbuf.display_active_buffer = "on"
python.urlbuf.display_buffer_number = "on"
python.urlbuf.display_nick = "off"
python.urlbuf.display_private = "on"
python.urlbuf.skip_buffers = ""
python.urlbuf.skip_duplicates = "on"
python.urlserver.buffer_short_name = "off"
python.urlserver.color = "darkgray"
python.urlserver.color_in_msg = ""
python.urlserver.debug = "off"
python.urlserver.display_urls = "on"
python.urlserver.display_urls_in_msg = "off"
python.urlserver.http_allowed_ips = "^127.0.0.1$"
python.urlserver.http_auth = ""
python.urlserver.http_autostart = "on"
python.urlserver.http_bg_color = "#f4f4f4"
python.urlserver.http_css_url = ""
python.urlserver.http_embed_image = "off"
python.urlserver.http_embed_youtube = "off"
python.urlserver.http_embed_youtube_size = "480*350"
python.urlserver.http_fg_color = "#000"
python.urlserver.http_hostname = "127.0.0.1"
python.urlserver.http_hostname_display = ""
python.urlserver.http_port = "30013"
python.urlserver.http_port_display = ""
python.urlserver.http_prefix_suffix = " "
python.urlserver.http_scheme_display = "http"
python.urlserver.http_time_format = "%d/%m/%y %H:%M:%S"
python.urlserver.http_title = "WeeChat URLs"
python.urlserver.http_url_prefix = "xox"
python.urlserver.msg_ignore_buffers = "core.weechat,python.grep"
python.urlserver.msg_ignore_dup_urls = "off"
python.urlserver.msg_ignore_regex = ""
python.urlserver.msg_ignore_tags = "irc_quit,irc_part,notify_none"
python.urlserver.msg_require_tags = "nick_"
python.urlserver.separators = "[|]"
python.urlserver.url_min_length = "0"
python.urlserver.urls_amount = "100"
python.whois_on_query.command = "/whois $nick $nick"
python.whois_on_query.self_query = "off"
python.windicate.show_hilights = "on"
python.windicate.show_priv_msg = "on"
ruby.check_license = "off"
tcl.check_license = "off"

[desc]
perl.buddylist.buddy.on.server = "show buddy who is connected to a server, but not visiting the same channel(s) (default: on)"
perl.buddylist.buddy.on.server.color = "color for online buddy but not visiting the same channel(s) (default: lightgreen)"
perl.buddylist.buddylist = "path/file-name to store your buddies. "%h" will be replaced by WeeChat home (by default: ~/.weechat)"
perl.buddylist.callback.timeout = "time in seconds to wait for answer from server. (default: 60)"
perl.buddylist.check.buddies = "time in seconds to send a /whois request to server. Be careful not to flood server (default: 20)"
perl.buddylist.color.away = "color for away buddies"
perl.buddylist.color.default = "fall back color. (default: standard weechat color)"
perl.buddylist.color.number = "color for channel number (default: lightred). If empty, channel list option is off"
perl.buddylist.color.offline = "color for offline buddies"
perl.buddylist.color.online = "color for online buddies"
perl.buddylist.color.server = "color for servername"
perl.buddylist.color.server.offline = "color for disconnected server (default: hide)"
perl.buddylist.display.original.nick = "display original nickname even if buddy changed his /nick (you have to add new nick to buddylist (default: off)"
perl.buddylist.display.social.net = "using bitlbee, buddies will be sorted in sublists with social-network name (eg. msn/jabber/facebook)(default: on)"
perl.buddylist.display.social.net.color = "color for social-network name (default: yellow)"
perl.buddylist.hide.bar = "hides buddylist bar when all servers with added buddies are offline (on = default, always = buddylist bar will be hidden (for example if you want to add item 'buddylist' to 'weechat.bar.status.items', off = buddylist bar will not be hidden))"
perl.buddylist.hide.buddy.if.offline = "hide buddy if offline (default: off)"
perl.buddylist.hide.server.if.buddies.offline = "hides server when all buddies are offline for this server (default: off)"
perl.buddylist.hide.servername.in.buddylist = "hide the servername in buddylist. If "on" only nicks will be displayed in buddylist (default: off)"
perl.buddylist.show.query = "displays a query buffer in front of the channel list"
perl.buddylist.sort = "sort method for buddylist (default = buddylist will be sort by nickname, status = buddylist will be sort by status (online, away, offline))"
perl.buddylist.text.away = "optional away text in buddylist (sort method has to be 'status')"
perl.buddylist.text.color = "color for optional online/away/offline-text in buddylist (default: white)"
perl.buddylist.text.offline = "optional offline text in buddylist (sort method has to be 'status')"
perl.buddylist.text.online = "optional online text in buddylist (sort method has to be 'status')"
perl.buddylist.use.redirection = "using redirection to get status of buddies (needs weechat >=0.3.4) (default: on)"
perl.colorize_lines.blacklist_buffers = "comma-separated list of channels to be ignored (e.g. freenode.#weechat,*.#python)"
perl.colorize_lines.buffers = "buffer type affected by the script (all/channel/query, default: all)"
perl.colorize_lines.highlight = "apply highlight color to the highlighted lines (off/on/nicks). the latter will limit highlighting to nicknames in option 'nicks'"
perl.colorize_lines.ignore_tags = "Comma-separated list of tags to ignore (see /debug tags)"
perl.colorize_lines.lines = "apply nickname color to the lines (off/on/nicks). the latter will limit highlighting to nicknames in option 'nicks'"
perl.colorize_lines.nicks = "comma-separater list of nicks (e.g. freenode.cat,*.dog) OR file name starting with '/' (e.g. /file.txt). in the latter case, nicknames will get loaded from that file inside weechat folder (e.g. from ~/.weechat/file.txt). nicknames in file are newline-separated (e.g. freenode.dog\n*.cat)"
perl.colorize_lines.own_lines = "apply nickname color to own lines (off/on/only). the latter turns off all other kinds of coloring altogether"
perl.colorize_lines.tags = "Comma-separated list of tags to accept (see /debug tags)"
perl.listsort.max_size = "maximum size of /list output in kilobytes to be handled"
perl.mass_hl_blocker.limit = "minimum amount of nicks in line to disable highlight (default: 5)"
perl.sort_buffers.hook_signal = "if "on" buffers will be sort every time a buffer was opened. Keep in mind that sorting buffers will delete read_marker. (default: off)"
perl.sort_buffers.server_wide = "buffers will be sorted server wide. This option takes only effect when option "hook_signal" is on. (default: on)"
perl.sort_buffers.sort_order = "sort of buffers "default" or "reverse" order. This option takes only effect when option "hook_signal" is on. (default: default)"
python.autosavekey.add = "adds channel and key to autojoin list on /join, if channel/key does not already exists (default: "off")"
python.autosavekey.mute = "execute command silently, only error messages will be displayed. (default: "off")"
python.autosavekey.secure = "change channel key in secure data. (default: "off")"
python.bufsize.count_filtered_lines = "filtered lines will be count in item. (default: 'on')"
python.bufsize.format = "format for items to display in bar, possible items: %P = percent indicator, %A = number of lines below last line, %L = lines counter, %C = current line %F = number of filtered lines (note: using WeeChat >= 0.4.2, content is evaluated, so you can use colors with format "${color:xxx}", see /help eval) (default: '${color:yellow}%P${color:default}⋅%{${color:yellow}%A${color:default}⇵${color:yellow}%C${color:default}/}${color:yellow}%L')"
python.clone_scanner.autofocus = "Focus the clone_scanner buffer in the current window if it isn't already displayed by a window. (default: "on")"
python.clone_scanner.clone_onjoin_alert_key = "Which 'key' to display in the on-join alerts: 'mask' for full hostmasks, or 'nick' for nicks (default: "mask")"
python.clone_scanner.clone_report_key = "Which 'key' to display in the clone report: 'mask' for full hostmasks, or 'nick' for nicks (default: "mask")"
python.clone_scanner.colors.clone_report.clone.match = "The colour of the match details (masks or nicks) in the clone report. (default: "chat")"
python.clone_scanner.colors.clone_report.clone.message = "The colour of the clone hit in the clone report message. (default: "chat")"
python.clone_scanner.colors.clone_report.header.channel = "The colour of the channel name in the clone report header. (default: "bold")"
python.clone_scanner.colors.clone_report.header.message = "The colour of the clone report header. (default: "chat")"
python.clone_scanner.colors.clone_report.header.number_of_hosts = "The colour of the number of hosts in the clone report header. (default: "bold")"
python.clone_scanner.colors.clone_report.subheader.host = "The colour of the host in the clone report subheader. (default: "bold")"
python.clone_scanner.colors.clone_report.subheader.message = "The colour of the clone report subheader. (default: "chat")"
python.clone_scanner.colors.clone_report.subheader.number_of_clones = "The colour of the number of clones in the clone report subheader. (default: "bold")"
python.clone_scanner.colors.join_messages.channel = "The colour for the 'channel'-part of the join messages. (default: "bold")"
python.clone_scanner.colors.join_messages.identhost = "The colour for the 'ident@host'-part of the join messages. (default: "chat")"
python.clone_scanner.colors.join_messages.message = "The base colour for the join messages. (default: "chat")"
python.clone_scanner.colors.join_messages.nick = "The colour for the 'nick'-part of the join messages. Note: if you have colorize_nicks, this option might not always work as expected. (default: "bold")"
python.clone_scanner.colors.mask.identhost = "The formatting of the identhost in the match mask. (default: "")"
python.clone_scanner.colors.mask.nick = "The formatting of the nick in the match mask. (default: "bold")"
python.clone_scanner.colors.onjoin_alert.channel = "The on-join clone alert's channel colour. Formats are space separated. (default: "red")"
python.clone_scanner.colors.onjoin_alert.matches = "The on-join clone alert's matches (masks or nicks) colour. Formats are space separated. Note: if you have colorize_nicks, this option might not work as expected. (default: "bold red")"
python.clone_scanner.colors.onjoin_alert.message = "The on-join clone alert's message colour. Formats are space separated. (default: "red")"
python.clone_scanner.colors.onjoin_alert.nick = "The on-join clone alert's nick colour. Formats are space separated. Note: if you have colorize_nicks, this option might not work as expected. (default: "bold red")"
python.clone_scanner.compare_idents = "Match against ident@host.name instead of just the hostname. Useful if you don't want different people from bouncers marked as clones (default: "off")"
python.clone_scanner.display_join_messages = "Display all joins in the clone_scanner buffer (default: "off")"
python.clone_scanner.display_onjoin_alert_clone_buffer = "Display an on-join clone alert in the clone_scanner buffer (default: "on")"
python.clone_scanner.display_onjoin_alert_current_buffer = "Display an on-join clone alert in the current buffer (default: "off")"
python.clone_scanner.display_onjoin_alert_target_buffer = "Display an on-join clone alert in the buffer where the clone was detected (default: "on")"
python.clone_scanner.display_scan_report_clone_buffer = "Display manual scan reports in the clone buffer (default: "on")"
python.clone_scanner.display_scan_report_current_buffer = "Display manual scan reports in the current buffer (default: "on")"
python.clone_scanner.display_scan_report_target_buffer = "Display manual scan reports in the buffer of the scanned channel (default: "off")"
python.clone_scanner.hooks.excluded_servers = "Which servers should the hook *not* be valid for? There's no support for wildcards unfortunately. E.g.: 'bitlbee,twitchtv' to exclude servers named bitlbee and twitchtv (default). (default: "bitlbee,twitchtv")"
python.clone_scanner.hooks.explicit_servers = "Comma-separated, wildcard-supporting list of servers for which we should add hook to for monitoring clones. E.g. 'freenode,chat4all,esper*' or '*' (default) (default: "*")"
python.clone_scanner.lag_warning = "Show temporary warning upon script load regarding the inefficiency of the script. Set to "off" to disable. (default: "on")"
python.go.auto_jump = "automatically jump to buffer when it is uniquely selected (default: "off")"
python.go.color_name = "color for buffer name (not selected) (default: "black,cyan")"
python.go.color_name_highlight = "color for highlight in buffer name (not selected) (default: "red,cyan")"
python.go.color_name_highlight_selected = "color for highlight in a selected buffer name (default: "red,brown")"
python.go.color_name_selected = "color for a selected buffer name (default: "black,brown")"
python.go.color_number = "color for buffer number (not selected) (default: "yellow,magenta")"
python.go.color_number_selected = "color for selected buffer number (default: "yellow,red")"
python.go.message = "message to display before list of buffers (default: "Go to: ")"
python.go.short_name = "display and search in short names instead of buffer name (default: "off")"
python.go.sort = "comma-separated list of keys to sort buffers (the order is important, sorts are performed in the given order): name = sort by name (or short name),  (default: "number,beginning")"
python.go.use_core_instead_weechat = "use name "core" instead of "weechat" for core buffer (default: "off")"
python.histman.buffer_close = "save command history, when buffer will be closed (default: off) (default: "off")"
python.histman.history_dir = "locale cache directory for history files ("%h" will be replaced by WeeChat home, "~/.weechat" by default) (default: "%h/history")"
python.histman.min_length = "minimum length of command/text (default: 2) (default: "2")"
python.histman.number = "number of history commands/text to save. A positive number will save from oldest to latest, a negative number will save from latest to oldest. 0 = save whole history (e.g. -10 will save the last 10 history entries (default: "0")"
python.histman.pattern = "a simple regex to ignore commands/text. Empty value disable pattern matching (default: "(.*password|.*nickserv|/quit)")"
python.histman.rmodifier = "use rmodifier options to ignore commands/text (default:off) (default: "off")"
python.histman.save = "define what should be save from history. Possible values are "command", "text", "all". This is a fallback option (see /help histman) (default: "all")"
python.histman.save_global = "save global history, possible values are "command", "text", "all" or "off"(default: off) (default: "off")"
python.histman.skip_double = "skip lines that already exists (case sensitive) (default: "on")"
python.listbuffer.autofocus = "Focus the listbuffer in the current window if it isn't already displayed by a window."
python.listbuffer.channel_min_width = "The minimum width used for the channel name in the channel list. If a channelname is shorter than this amount, the column will be padded with spaces."
python.listbuffer.modes_min_width = "The minimum width used for modes in the channel list. If a channel has less modes than this amount, the column will be padded with spaces."
python.listbuffer.sort_inverted = "Invert the sort order for the channel list."
python.listbuffer.sort_order = "Last used sort order for the channel list."
python.listbuffer.users_min_width = "The minimum width used for the usercount in the channel list. If the usercount has less digits than this amount, the column will be padded with spaces."
python.logsize.display = "could be "length", "lines" or "both". CAVE: Use display option "lines" very carefully, large logfiles can stall the script and weechat!!! (default: "length")"
python.logsize.file_not_found = "displays a text in item, when logfile wasn't found (default: "")"
python.logsize.log_disabled = "displays a text in item, when logger is disabled for buffer (default: "")"
python.logsize.refresh = "refresh timer (in seconds) (default: "60")"
python.logsize.size = "display length in KB/MB/GB/TB. Leave option empty for byte (default: "KB")"
python.responsive_layout.debug = "Script debug output (default: off)"
python.responsive_layout.default_nicklist = "Global setting to always show nicklist when layout switches. (default: on)"
python.spell_correction.auto_pop_up_item = "automatic pop-up suggestion item on a misspelled word (default: "off")"
python.spell_correction.auto_replace = "replaces misspelled word with selected suggestion, automatically. If you use "off" you will have to bind command "/spell_correction replace" to a key (default: "on")"
python.spell_correction.catch_input_completion = "will catch the input_complete commands [TAB-key] (default: "on")"
python.spell_correction.complete_near = "show suggestions item only if you are n-chars near the misspelled word (0 = off). Using 'replace_mode' cursor has to be n-chars near misspelled word to cycle through suggestions. (default: "0")"
python.spell_correction.eat_input_char = "will eat the next char you type, after replacing a misspelled word (default: "on")"
python.spell_correction.hide_single_dict = "will hide dict in item if you have a single dict for buffer only (default: "on")"
python.spell_correction.replace_mode = "misspelled word will be replaced directly by suggestions. Use option 'complete_near' to specify range and item 'spell_suggest' to show possible suggestions. (default: "off")"
python.spell_correction.suggest_item = "item format (%S = suggestion, %D = dict). Colors are allowed with format "${color}". note: since WeeChat 0.4.2 content is evaluated, see /help eval. (default: "${white}%S${default}")"
python.urlbuf.display_active_buffer = "display URLs from the active buffer"
python.urlbuf.display_buffer_number = "display the buffer's number"
python.urlbuf.display_nick = "display the nick of the user"
python.urlbuf.display_private = "display URLs from private messages"
python.urlbuf.skip_buffers = "a comma separated list of buffer numbers to skip"
python.urlbuf.skip_duplicates = "skip the URL that is already in the urlbuf"
python.urlserver.buffer_short_name = "use buffer short name on dedicated buffer (default: "off")"
python.urlserver.color = "color for urls displayed after message (default: "darkgray")"
python.urlserver.color_in_msg = "color for urls displayed inside irc message: it is a number (irc color) between 00 and 15 (see doc for a list of irc colors) (default: "")"
python.urlserver.debug = "print some debug messages (default: "off")"
python.urlserver.display_urls = "display URLs below messages (default: "on")"
python.urlserver.display_urls_in_msg = "add shorten url next to the original url (only in IRC messages) (useful for urlserver behind relay/irc) (default: "off")"
python.urlserver.http_allowed_ips = "regex for IPs allowed to use server (example: "^(123.45.67.89|192.160.*)$") (default: "")"
python.urlserver.http_auth = "login and password (format: "login:password") required to access to page with list of URLs (default: "")"
python.urlserver.http_autostart = "start the built-in HTTP server automatically) (default: "on")"
python.urlserver.http_bg_color = "background color for HTML page (default: "#f4f4f4")"
python.urlserver.http_css_url = "URL of external Cascading Style Sheet to add (BE CAREFUL: the HTTP referer will be sent to site hosting CSS file!) (empty value = use default embedded CSS) (default: "")"
python.urlserver.http_embed_image = "embed images in HTML page (BE CAREFUL: the HTTP referer will be sent to site hosting image!) (default: "off")"
python.urlserver.http_embed_youtube = "embed youtube videos in HTML page (BE CAREFUL: the HTTP referer will be sent to youtube!) (default: "off")"
python.urlserver.http_embed_youtube_size = "size for embedded youtube video, format is "xxx*yyy" (default: "480*350")"
python.urlserver.http_fg_color = "foreground color for HTML page (default: "#000")"
python.urlserver.http_hostname = "force hostname/IP in bind of socket (empty value = auto-detect current hostname) (default: "")"
python.urlserver.http_hostname_display = "display this hostname in shortened URLs (default: "")"
python.urlserver.http_port = "force port for listening (empty value = find a random free port) (default: "")"
python.urlserver.http_port_display = "display this port in shortened URLs. Useful if you forward a different external port to the internal port (default: "")"
python.urlserver.http_prefix_suffix = "suffix displayed between prefix and message in HTML page (default: " ")"
python.urlserver.http_scheme_display = "display this scheme in shortened URLs (default: "http")"
python.urlserver.http_time_format = "time format in the HTML page (default: "%d/%m/%y %H:%M:%S")"
python.urlserver.http_title = "title of the HTML page (default: "WeeChat URLs")"
python.urlserver.http_url_prefix = "prefix to add in URLs to prevent external people to scan your URLs (for example: prefix "xx" will give URL: http://host.com:1234/xx/8) (default: "")"
python.urlserver.msg_ignore_buffers = "comma-separated list (without spaces) of buffers to ignore (full name like "irc.freenode.#weechat") (default: "core.weechat,python.grep")"
python.urlserver.msg_ignore_dup_urls = "ignore duplicated URLs (do not add an URL in list if it is already) (default: "off")"
python.urlserver.msg_ignore_regex = "ignore messages matching this regex (default: "")"
python.urlserver.msg_ignore_tags = "comma-separated list (without spaces) of tags (or beginning of tags) to ignore (for example, use "notify_none" to ignore self messages or "nick_weebot" to ignore messages from nick "weebot") (default: "irc_quit,irc_part,notify_none")"
python.urlserver.msg_require_tags = "comma-separated list (without spaces) of tags (or beginning of tags) required to shorten URLs (for example "nick_" to shorten URLs only in messages from other users) (default: "nick_")"
python.urlserver.separators = "separators for short url list (string with exactly 3 chars) (default: "[|]")"
python.urlserver.url_min_length = "minimum length for an URL to be shortened (0 = shorten all URLs, -1 = detect length based on shorten URL) (default: "0")"
python.urlserver.urls_amount = "number of URLs to keep in memory (and in file when script is not loaded) (default: "100")"
python.whois_on_query.command = "the command sent to do the whois ($nick is repladed by nick) (default: "/whois $nick $nick")"
python.whois_on_query.self_query = "if on, send whois for self queries (default: "off")"
python.windicate.show_hilights = "Should hilights trigger indications"
python.windicate.show_priv_msg = "Should privmsgs trigger indications"
